"""
    Babylon Core API - RCnet V2

    Generated by https://openapi-generator.tech with customisation from https://github.com/radixdlt/python-core-client/
"""


import re  # noqa: F401
import sys  # noqa: F401

from core_client.api_client import ApiClient, Endpoint as _Endpoint
from core_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from core_client.model.basic_error_response import BasicErrorResponse
from core_client.model.state_access_controller_request import StateAccessControllerRequest
from core_client.model.state_access_controller_response import StateAccessControllerResponse
from core_client.model.state_account_request import StateAccountRequest
from core_client.model.state_account_response import StateAccountResponse
from core_client.model.state_component_request import StateComponentRequest
from core_client.model.state_component_response import StateComponentResponse
from core_client.model.state_consensus_manager_request import StateConsensusManagerRequest
from core_client.model.state_consensus_manager_response import StateConsensusManagerResponse
from core_client.model.state_non_fungible_request import StateNonFungibleRequest
from core_client.model.state_non_fungible_response import StateNonFungibleResponse
from core_client.model.state_package_request import StatePackageRequest
from core_client.model.state_package_response import StatePackageResponse
from core_client.model.state_resource_request import StateResourceRequest
from core_client.model.state_resource_response import StateResourceResponse
from core_client.model.state_validator_request import StateValidatorRequest
from core_client.model.state_validator_response import StateValidatorResponse


class StateApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __state_access_controller_post(
            self,
            state_access_controller_request,
            **kwargs
        ):
            """Get Access Controller Details  # noqa: E501

            Reads the access controller's substate/s from the top of the current ledger.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.state_access_controller_post(state_access_controller_request, async_req=True)
            >>> result = thread.get()

            Args:
                state_access_controller_request (StateAccessControllerRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                StateAccessControllerResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['state_access_controller_request'] = \
                state_access_controller_request
            return self.call_with_http_info(**kwargs)

        self.state_access_controller_post = _Endpoint(
            settings={
                'response_type': (StateAccessControllerResponse,),
                'auth': [],
                'endpoint_path': '/state/access-controller',
                'operation_id': 'state_access_controller_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'state_access_controller_request',
                ],
                'required': [
                    'state_access_controller_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'state_access_controller_request':
                        (StateAccessControllerRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'state_access_controller_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__state_access_controller_post
        )

        def __state_account_post(
            self,
            state_account_request,
            **kwargs
        ):
            """Get Account Details  # noqa: E501

            Reads the account's substate/s from the top of the current ledger. Also returns all vaults under the account.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.state_account_post(state_account_request, async_req=True)
            >>> result = thread.get()

            Args:
                state_account_request (StateAccountRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                StateAccountResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['state_account_request'] = \
                state_account_request
            return self.call_with_http_info(**kwargs)

        self.state_account_post = _Endpoint(
            settings={
                'response_type': (StateAccountResponse,),
                'auth': [],
                'endpoint_path': '/state/account',
                'operation_id': 'state_account_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'state_account_request',
                ],
                'required': [
                    'state_account_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'state_account_request':
                        (StateAccountRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'state_account_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__state_account_post
        )

        def __state_component_post(
            self,
            state_component_request,
            **kwargs
        ):
            """Get Component Details  # noqa: E501

            Reads the component's substate/s from the top of the current ledger. Also recursively extracts vault balance totals from the component's entity subtree.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.state_component_post(state_component_request, async_req=True)
            >>> result = thread.get()

            Args:
                state_component_request (StateComponentRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                StateComponentResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['state_component_request'] = \
                state_component_request
            return self.call_with_http_info(**kwargs)

        self.state_component_post = _Endpoint(
            settings={
                'response_type': (StateComponentResponse,),
                'auth': [],
                'endpoint_path': '/state/component',
                'operation_id': 'state_component_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'state_component_request',
                ],
                'required': [
                    'state_component_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'state_component_request':
                        (StateComponentRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'state_component_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__state_component_post
        )

        def __state_consensus_manager_post(
            self,
            state_consensus_manager_request,
            **kwargs
        ):
            """Get Consensus Manager Details  # noqa: E501

            Reads the consensus manager's substate/s from the top of the current ledger.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.state_consensus_manager_post(state_consensus_manager_request, async_req=True)
            >>> result = thread.get()

            Args:
                state_consensus_manager_request (StateConsensusManagerRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                StateConsensusManagerResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['state_consensus_manager_request'] = \
                state_consensus_manager_request
            return self.call_with_http_info(**kwargs)

        self.state_consensus_manager_post = _Endpoint(
            settings={
                'response_type': (StateConsensusManagerResponse,),
                'auth': [],
                'endpoint_path': '/state/consensus-manager',
                'operation_id': 'state_consensus_manager_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'state_consensus_manager_request',
                ],
                'required': [
                    'state_consensus_manager_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'state_consensus_manager_request':
                        (StateConsensusManagerRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'state_consensus_manager_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__state_consensus_manager_post
        )

        def __state_non_fungible_post(
            self,
            state_non_fungible_request,
            **kwargs
        ):
            """Get Non-Fungible Details  # noqa: E501

            Reads the data associated with a single Non-Fungible Unit under a Non-Fungible Resource.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.state_non_fungible_post(state_non_fungible_request, async_req=True)
            >>> result = thread.get()

            Args:
                state_non_fungible_request (StateNonFungibleRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                StateNonFungibleResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['state_non_fungible_request'] = \
                state_non_fungible_request
            return self.call_with_http_info(**kwargs)

        self.state_non_fungible_post = _Endpoint(
            settings={
                'response_type': (StateNonFungibleResponse,),
                'auth': [],
                'endpoint_path': '/state/non-fungible',
                'operation_id': 'state_non_fungible_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'state_non_fungible_request',
                ],
                'required': [
                    'state_non_fungible_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'state_non_fungible_request':
                        (StateNonFungibleRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'state_non_fungible_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__state_non_fungible_post
        )

        def __state_package_post(
            self,
            state_package_request,
            **kwargs
        ):
            """Get Package Details  # noqa: E501

            Reads the package's substate/s from the top of the current ledger.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.state_package_post(state_package_request, async_req=True)
            >>> result = thread.get()

            Args:
                state_package_request (StatePackageRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                StatePackageResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['state_package_request'] = \
                state_package_request
            return self.call_with_http_info(**kwargs)

        self.state_package_post = _Endpoint(
            settings={
                'response_type': (StatePackageResponse,),
                'auth': [],
                'endpoint_path': '/state/package',
                'operation_id': 'state_package_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'state_package_request',
                ],
                'required': [
                    'state_package_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'state_package_request':
                        (StatePackageRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'state_package_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__state_package_post
        )

        def __state_resource_post(
            self,
            state_resource_request,
            **kwargs
        ):
            """Get Resource Details  # noqa: E501

            Reads the resource manager's substate/s from the top of the current ledger.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.state_resource_post(state_resource_request, async_req=True)
            >>> result = thread.get()

            Args:
                state_resource_request (StateResourceRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                StateResourceResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['state_resource_request'] = \
                state_resource_request
            return self.call_with_http_info(**kwargs)

        self.state_resource_post = _Endpoint(
            settings={
                'response_type': (StateResourceResponse,),
                'auth': [],
                'endpoint_path': '/state/resource',
                'operation_id': 'state_resource_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'state_resource_request',
                ],
                'required': [
                    'state_resource_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'state_resource_request':
                        (StateResourceRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'state_resource_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__state_resource_post
        )

        def __state_validator_post(
            self,
            state_validator_request,
            **kwargs
        ):
            """Get Validator Details  # noqa: E501

            Reads the validator's substate/s from the top of the current ledger.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.state_validator_post(state_validator_request, async_req=True)
            >>> result = thread.get()

            Args:
                state_validator_request (StateValidatorRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                StateValidatorResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['state_validator_request'] = \
                state_validator_request
            return self.call_with_http_info(**kwargs)

        self.state_validator_post = _Endpoint(
            settings={
                'response_type': (StateValidatorResponse,),
                'auth': [],
                'endpoint_path': '/state/validator',
                'operation_id': 'state_validator_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'state_validator_request',
                ],
                'required': [
                    'state_validator_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'state_validator_request':
                        (StateValidatorRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'state_validator_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__state_validator_post
        )
