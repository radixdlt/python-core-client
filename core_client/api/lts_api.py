"""
    Babylon Core API - RCnet V2

    Generated by https://openapi-generator.tech with customisation from https://github.com/radixdlt/python-core-client/
"""


import re  # noqa: F401
import sys  # noqa: F401

from core_client.api_client import ApiClient, Endpoint as _Endpoint
from core_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from core_client.model.basic_error_response import BasicErrorResponse
from core_client.model.lts_state_account_all_fungible_resource_balances_request import LtsStateAccountAllFungibleResourceBalancesRequest
from core_client.model.lts_state_account_all_fungible_resource_balances_response import LtsStateAccountAllFungibleResourceBalancesResponse
from core_client.model.lts_state_account_fungible_resource_balance_request import LtsStateAccountFungibleResourceBalanceRequest
from core_client.model.lts_state_account_fungible_resource_balance_response import LtsStateAccountFungibleResourceBalanceResponse
from core_client.model.lts_stream_account_transaction_outcomes_request import LtsStreamAccountTransactionOutcomesRequest
from core_client.model.lts_stream_account_transaction_outcomes_response import LtsStreamAccountTransactionOutcomesResponse
from core_client.model.lts_stream_transaction_outcomes_request import LtsStreamTransactionOutcomesRequest
from core_client.model.lts_stream_transaction_outcomes_response import LtsStreamTransactionOutcomesResponse
from core_client.model.lts_transaction_construction_request import LtsTransactionConstructionRequest
from core_client.model.lts_transaction_construction_response import LtsTransactionConstructionResponse
from core_client.model.lts_transaction_status_request import LtsTransactionStatusRequest
from core_client.model.lts_transaction_status_response import LtsTransactionStatusResponse
from core_client.model.lts_transaction_submit_request import LtsTransactionSubmitRequest
from core_client.model.lts_transaction_submit_response import LtsTransactionSubmitResponse
from core_client.model.transaction_submit_error_response import TransactionSubmitErrorResponse


class LTSApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __lts_state_account_all_fungible_resource_balances_post(
            self,
            lts_state_account_all_fungible_resource_balances_request,
            **kwargs
        ):
            """Get All Account Balances  # noqa: E501

            Returns balances for all resources associated with an account  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.lts_state_account_all_fungible_resource_balances_post(lts_state_account_all_fungible_resource_balances_request, async_req=True)
            >>> result = thread.get()

            Args:
                lts_state_account_all_fungible_resource_balances_request (LtsStateAccountAllFungibleResourceBalancesRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                LtsStateAccountAllFungibleResourceBalancesResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['lts_state_account_all_fungible_resource_balances_request'] = \
                lts_state_account_all_fungible_resource_balances_request
            return self.call_with_http_info(**kwargs)

        self.lts_state_account_all_fungible_resource_balances_post = _Endpoint(
            settings={
                'response_type': (LtsStateAccountAllFungibleResourceBalancesResponse,),
                'auth': [],
                'endpoint_path': '/lts/state/account-all-fungible-resource-balances',
                'operation_id': 'lts_state_account_all_fungible_resource_balances_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'lts_state_account_all_fungible_resource_balances_request',
                ],
                'required': [
                    'lts_state_account_all_fungible_resource_balances_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lts_state_account_all_fungible_resource_balances_request':
                        (LtsStateAccountAllFungibleResourceBalancesRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'lts_state_account_all_fungible_resource_balances_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__lts_state_account_all_fungible_resource_balances_post
        )

        def __lts_state_account_fungible_resource_balance_post(
            self,
            lts_state_account_fungible_resource_balance_request,
            **kwargs
        ):
            """Get Single Account Balance  # noqa: E501

            Returns balance of a single fungible resource in an account  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.lts_state_account_fungible_resource_balance_post(lts_state_account_fungible_resource_balance_request, async_req=True)
            >>> result = thread.get()

            Args:
                lts_state_account_fungible_resource_balance_request (LtsStateAccountFungibleResourceBalanceRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                LtsStateAccountFungibleResourceBalanceResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['lts_state_account_fungible_resource_balance_request'] = \
                lts_state_account_fungible_resource_balance_request
            return self.call_with_http_info(**kwargs)

        self.lts_state_account_fungible_resource_balance_post = _Endpoint(
            settings={
                'response_type': (LtsStateAccountFungibleResourceBalanceResponse,),
                'auth': [],
                'endpoint_path': '/lts/state/account-fungible-resource-balance',
                'operation_id': 'lts_state_account_fungible_resource_balance_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'lts_state_account_fungible_resource_balance_request',
                ],
                'required': [
                    'lts_state_account_fungible_resource_balance_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lts_state_account_fungible_resource_balance_request':
                        (LtsStateAccountFungibleResourceBalanceRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'lts_state_account_fungible_resource_balance_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__lts_state_account_fungible_resource_balance_post
        )

        def __lts_stream_account_transaction_outcomes_post(
            self,
            lts_stream_account_transaction_outcomes_request,
            **kwargs
        ):
            """Get Account Transaction Outcomes  # noqa: E501

            Returns a list of committed transaction outcomes (containing balance changes) from a given state version, filtered to only transactions which involved the given account.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.lts_stream_account_transaction_outcomes_post(lts_stream_account_transaction_outcomes_request, async_req=True)
            >>> result = thread.get()

            Args:
                lts_stream_account_transaction_outcomes_request (LtsStreamAccountTransactionOutcomesRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                LtsStreamAccountTransactionOutcomesResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['lts_stream_account_transaction_outcomes_request'] = \
                lts_stream_account_transaction_outcomes_request
            return self.call_with_http_info(**kwargs)

        self.lts_stream_account_transaction_outcomes_post = _Endpoint(
            settings={
                'response_type': (LtsStreamAccountTransactionOutcomesResponse,),
                'auth': [],
                'endpoint_path': '/lts/stream/account-transaction-outcomes',
                'operation_id': 'lts_stream_account_transaction_outcomes_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'lts_stream_account_transaction_outcomes_request',
                ],
                'required': [
                    'lts_stream_account_transaction_outcomes_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lts_stream_account_transaction_outcomes_request':
                        (LtsStreamAccountTransactionOutcomesRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'lts_stream_account_transaction_outcomes_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__lts_stream_account_transaction_outcomes_post
        )

        def __lts_stream_transaction_outcomes_post(
            self,
            lts_stream_transaction_outcomes_request,
            **kwargs
        ):
            """Get Transaction Outcomes  # noqa: E501

            Returns a list of committed transaction outcomes (containing balance changes) from a given state version.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.lts_stream_transaction_outcomes_post(lts_stream_transaction_outcomes_request, async_req=True)
            >>> result = thread.get()

            Args:
                lts_stream_transaction_outcomes_request (LtsStreamTransactionOutcomesRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                LtsStreamTransactionOutcomesResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['lts_stream_transaction_outcomes_request'] = \
                lts_stream_transaction_outcomes_request
            return self.call_with_http_info(**kwargs)

        self.lts_stream_transaction_outcomes_post = _Endpoint(
            settings={
                'response_type': (LtsStreamTransactionOutcomesResponse,),
                'auth': [],
                'endpoint_path': '/lts/stream/transaction-outcomes',
                'operation_id': 'lts_stream_transaction_outcomes_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'lts_stream_transaction_outcomes_request',
                ],
                'required': [
                    'lts_stream_transaction_outcomes_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lts_stream_transaction_outcomes_request':
                        (LtsStreamTransactionOutcomesRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'lts_stream_transaction_outcomes_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__lts_stream_transaction_outcomes_post
        )

        def __lts_transaction_construction_post(
            self,
            lts_transaction_construction_request,
            **kwargs
        ):
            """Get Construction Metadata  # noqa: E501

            Returns information necessary to build a transaction  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.lts_transaction_construction_post(lts_transaction_construction_request, async_req=True)
            >>> result = thread.get()

            Args:
                lts_transaction_construction_request (LtsTransactionConstructionRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                LtsTransactionConstructionResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['lts_transaction_construction_request'] = \
                lts_transaction_construction_request
            return self.call_with_http_info(**kwargs)

        self.lts_transaction_construction_post = _Endpoint(
            settings={
                'response_type': (LtsTransactionConstructionResponse,),
                'auth': [],
                'endpoint_path': '/lts/transaction/construction',
                'operation_id': 'lts_transaction_construction_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'lts_transaction_construction_request',
                ],
                'required': [
                    'lts_transaction_construction_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lts_transaction_construction_request':
                        (LtsTransactionConstructionRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'lts_transaction_construction_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__lts_transaction_construction_post
        )

        def __lts_transaction_status_post(
            self,
            lts_transaction_status_request,
            **kwargs
        ):
            """Get Transaction Status  # noqa: E501

            Shares the node's knowledge of any payloads associated with the given intent hash. Generally there will be a single payload for a given intent, but it's theoretically possible there may be multiple. This knowledge is summarised into a status for the intent. This summarised status in the response is likely sufficient for most clients.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.lts_transaction_status_post(lts_transaction_status_request, async_req=True)
            >>> result = thread.get()

            Args:
                lts_transaction_status_request (LtsTransactionStatusRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                LtsTransactionStatusResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['lts_transaction_status_request'] = \
                lts_transaction_status_request
            return self.call_with_http_info(**kwargs)

        self.lts_transaction_status_post = _Endpoint(
            settings={
                'response_type': (LtsTransactionStatusResponse,),
                'auth': [],
                'endpoint_path': '/lts/transaction/status',
                'operation_id': 'lts_transaction_status_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'lts_transaction_status_request',
                ],
                'required': [
                    'lts_transaction_status_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lts_transaction_status_request':
                        (LtsTransactionStatusRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'lts_transaction_status_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__lts_transaction_status_post
        )

        def __lts_transaction_submit_post(
            self,
            lts_transaction_submit_request,
            **kwargs
        ):
            """Submit Transaction  # noqa: E501

            Submits a notarized transaction to the network. Returns whether the transaction submission was already included in the node's mempool.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.lts_transaction_submit_post(lts_transaction_submit_request, async_req=True)
            >>> result = thread.get()

            Args:
                lts_transaction_submit_request (LtsTransactionSubmitRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                LtsTransactionSubmitResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['lts_transaction_submit_request'] = \
                lts_transaction_submit_request
            return self.call_with_http_info(**kwargs)

        self.lts_transaction_submit_post = _Endpoint(
            settings={
                'response_type': (LtsTransactionSubmitResponse,),
                'auth': [],
                'endpoint_path': '/lts/transaction/submit',
                'operation_id': 'lts_transaction_submit_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'lts_transaction_submit_request',
                ],
                'required': [
                    'lts_transaction_submit_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lts_transaction_submit_request':
                        (LtsTransactionSubmitRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'lts_transaction_submit_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__lts_transaction_submit_post
        )
