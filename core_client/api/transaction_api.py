"""
    Radix Core API - Babylon

    Generated by https://openapi-generator.tech with customisation from https://github.com/radixdlt/python-core-client/
"""


import re  # noqa: F401
import sys  # noqa: F401

from core_client.api_client import ApiClient, Endpoint as _Endpoint
from core_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from core_client.model.basic_error_response import BasicErrorResponse
from core_client.model.transaction_call_preview_request import TransactionCallPreviewRequest
from core_client.model.transaction_call_preview_response import TransactionCallPreviewResponse
from core_client.model.transaction_parse_request import TransactionParseRequest
from core_client.model.transaction_parse_response import TransactionParseResponse
from core_client.model.transaction_preview_request import TransactionPreviewRequest
from core_client.model.transaction_preview_response import TransactionPreviewResponse
from core_client.model.transaction_receipt_request import TransactionReceiptRequest
from core_client.model.transaction_receipt_response import TransactionReceiptResponse
from core_client.model.transaction_status_request import TransactionStatusRequest
from core_client.model.transaction_status_response import TransactionStatusResponse
from core_client.model.transaction_submit_error_response import TransactionSubmitErrorResponse
from core_client.model.transaction_submit_request import TransactionSubmitRequest
from core_client.model.transaction_submit_response import TransactionSubmitResponse


class TransactionApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __transaction_call_preview_post(
            self,
            transaction_call_preview_request,
            **kwargs
        ):
            """Scrypto Call Preview  # noqa: E501

            Preview a scrypto function or method call against the latest network state. Returns the result of the scrypto function or method call.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.transaction_call_preview_post(transaction_call_preview_request, async_req=True)
            >>> result = thread.get()

            Args:
                transaction_call_preview_request (TransactionCallPreviewRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TransactionCallPreviewResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['transaction_call_preview_request'] = \
                transaction_call_preview_request
            return self.call_with_http_info(**kwargs)

        self.transaction_call_preview_post = _Endpoint(
            settings={
                'response_type': (TransactionCallPreviewResponse,),
                'auth': [],
                'endpoint_path': '/transaction/call-preview',
                'operation_id': 'transaction_call_preview_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transaction_call_preview_request',
                ],
                'required': [
                    'transaction_call_preview_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transaction_call_preview_request':
                        (TransactionCallPreviewRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transaction_call_preview_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__transaction_call_preview_post
        )

        def __transaction_parse_post(
            self,
            transaction_parse_request,
            **kwargs
        ):
            """Parse Transaction Payload  # noqa: E501

            Extracts the contents and hashes of various types of transaction payloads, or sub-payloads.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.transaction_parse_post(transaction_parse_request, async_req=True)
            >>> result = thread.get()

            Args:
                transaction_parse_request (TransactionParseRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TransactionParseResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['transaction_parse_request'] = \
                transaction_parse_request
            return self.call_with_http_info(**kwargs)

        self.transaction_parse_post = _Endpoint(
            settings={
                'response_type': (TransactionParseResponse,),
                'auth': [],
                'endpoint_path': '/transaction/parse',
                'operation_id': 'transaction_parse_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transaction_parse_request',
                ],
                'required': [
                    'transaction_parse_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transaction_parse_request':
                        (TransactionParseRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transaction_parse_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__transaction_parse_post
        )

        def __transaction_preview_post(
            self,
            transaction_preview_request,
            **kwargs
        ):
            """Transaction Preview  # noqa: E501

            Preview a transaction against the latest network state, and returns the preview receipt.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.transaction_preview_post(transaction_preview_request, async_req=True)
            >>> result = thread.get()

            Args:
                transaction_preview_request (TransactionPreviewRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TransactionPreviewResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['transaction_preview_request'] = \
                transaction_preview_request
            return self.call_with_http_info(**kwargs)

        self.transaction_preview_post = _Endpoint(
            settings={
                'response_type': (TransactionPreviewResponse,),
                'auth': [],
                'endpoint_path': '/transaction/preview',
                'operation_id': 'transaction_preview_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transaction_preview_request',
                ],
                'required': [
                    'transaction_preview_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transaction_preview_request':
                        (TransactionPreviewRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transaction_preview_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__transaction_preview_post
        )

        def __transaction_receipt_post(
            self,
            transaction_receipt_request,
            **kwargs
        ):
            """Get Transaction Receipt  # noqa: E501

            Gets the transaction receipt for a committed transaction.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.transaction_receipt_post(transaction_receipt_request, async_req=True)
            >>> result = thread.get()

            Args:
                transaction_receipt_request (TransactionReceiptRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TransactionReceiptResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['transaction_receipt_request'] = \
                transaction_receipt_request
            return self.call_with_http_info(**kwargs)

        self.transaction_receipt_post = _Endpoint(
            settings={
                'response_type': (TransactionReceiptResponse,),
                'auth': [],
                'endpoint_path': '/transaction/receipt',
                'operation_id': 'transaction_receipt_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transaction_receipt_request',
                ],
                'required': [
                    'transaction_receipt_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transaction_receipt_request':
                        (TransactionReceiptRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transaction_receipt_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__transaction_receipt_post
        )

        def __transaction_status_post(
            self,
            transaction_status_request,
            **kwargs
        ):
            """Get Transaction Status  # noqa: E501

            Shares the node's knowledge of any payloads associated with the given intent hash. Generally there will be a single payload for a given intent, but it's theoretically possible there may be multiple. This knowledge is summarised into a status for the intent. This summarised status in the response is likely sufficient for most clients.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.transaction_status_post(transaction_status_request, async_req=True)
            >>> result = thread.get()

            Args:
                transaction_status_request (TransactionStatusRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TransactionStatusResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['transaction_status_request'] = \
                transaction_status_request
            return self.call_with_http_info(**kwargs)

        self.transaction_status_post = _Endpoint(
            settings={
                'response_type': (TransactionStatusResponse,),
                'auth': [],
                'endpoint_path': '/transaction/status',
                'operation_id': 'transaction_status_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transaction_status_request',
                ],
                'required': [
                    'transaction_status_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transaction_status_request':
                        (TransactionStatusRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transaction_status_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__transaction_status_post
        )

        def __transaction_submit_post(
            self,
            transaction_submit_request,
            **kwargs
        ):
            """Transaction Submit  # noqa: E501

            Submits a notarized transaction to the network. Returns whether the transaction submission was already included in the node's mempool.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.transaction_submit_post(transaction_submit_request, async_req=True)
            >>> result = thread.get()

            Args:
                transaction_submit_request (TransactionSubmitRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TransactionSubmitResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['transaction_submit_request'] = \
                transaction_submit_request
            return self.call_with_http_info(**kwargs)

        self.transaction_submit_post = _Endpoint(
            settings={
                'response_type': (TransactionSubmitResponse,),
                'auth': [],
                'endpoint_path': '/transaction/submit',
                'operation_id': 'transaction_submit_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transaction_submit_request',
                ],
                'required': [
                    'transaction_submit_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transaction_submit_request':
                        (TransactionSubmitRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transaction_submit_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__transaction_submit_post
        )
