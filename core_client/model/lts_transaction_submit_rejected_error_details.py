"""
    Babylon Core API - RCnet V2

    Generated by https://openapi-generator.tech with customisation from https://github.com/radixdlt/python-core-client/
"""


import re  # noqa: F401
import sys  # noqa: F401

from core_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from core_client.exceptions import ApiAttributeError


def lazy_import():
    from core_client.model.instant import Instant
    from core_client.model.lts_transaction_submit_error_details import LtsTransactionSubmitErrorDetails
    from core_client.model.lts_transaction_submit_error_details_type import LtsTransactionSubmitErrorDetailsType
    from core_client.model.lts_transaction_submit_priority_threshold_not_met_error_details import LtsTransactionSubmitPriorityThresholdNotMetErrorDetails
    from core_client.model.lts_transaction_submit_rejected_error_details import LtsTransactionSubmitRejectedErrorDetails
    from core_client.model.lts_transaction_submit_rejected_error_details_all_of import LtsTransactionSubmitRejectedErrorDetailsAllOf
    globals()['Instant'] = Instant
    globals()['LtsTransactionSubmitErrorDetails'] = LtsTransactionSubmitErrorDetails
    globals()['LtsTransactionSubmitErrorDetailsType'] = LtsTransactionSubmitErrorDetailsType
    globals()['LtsTransactionSubmitPriorityThresholdNotMetErrorDetails'] = LtsTransactionSubmitPriorityThresholdNotMetErrorDetails
    globals()['LtsTransactionSubmitRejectedErrorDetails'] = LtsTransactionSubmitRejectedErrorDetails
    globals()['LtsTransactionSubmitRejectedErrorDetailsAllOf'] = LtsTransactionSubmitRejectedErrorDetailsAllOf


class LtsTransactionSubmitRejectedErrorDetails(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
        ('retry_from_epoch',): {
            'inclusive_maximum': 10000000000,
            'inclusive_minimum': 0,
        },
        ('invalid_from_epoch',): {
            'inclusive_maximum': 10000000000,
            'inclusive_minimum': 0,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'error_message': (str,),  # noqa: E501
            'is_fresh': (bool,),  # noqa: E501
            'is_payload_rejection_permanent': (bool,),  # noqa: E501
            'is_intent_rejection_permanent': (bool,),  # noqa: E501
            'is_rejected_because_intent_already_committed': (bool,),  # noqa: E501
            'type': (LtsTransactionSubmitErrorDetailsType,),  # noqa: E501
            'retry_from_timestamp': (Instant,),  # noqa: E501
            'retry_from_epoch': (int,),  # noqa: E501
            'invalid_from_epoch': (int,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        lazy_import()
        val = {
            'PriorityThresholdNotMet': LtsTransactionSubmitPriorityThresholdNotMetErrorDetails,
            'Rejected': LtsTransactionSubmitRejectedErrorDetails,
        }
        if not val:
            return None
        return {'type': val}

    attribute_map = {
        'error_message': 'error_message',  # noqa: E501
        'is_fresh': 'is_fresh',  # noqa: E501
        'is_payload_rejection_permanent': 'is_payload_rejection_permanent',  # noqa: E501
        'is_intent_rejection_permanent': 'is_intent_rejection_permanent',  # noqa: E501
        'is_rejected_because_intent_already_committed': 'is_rejected_because_intent_already_committed',  # noqa: E501
        'type': 'type',  # noqa: E501
        'retry_from_timestamp': 'retry_from_timestamp',  # noqa: E501
        'retry_from_epoch': 'retry_from_epoch',  # noqa: E501
        'invalid_from_epoch': 'invalid_from_epoch',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, error_message, is_fresh, is_payload_rejection_permanent, is_intent_rejection_permanent, is_rejected_because_intent_already_committed, type, *args, **kwargs):  # noqa: E501
        """LtsTransactionSubmitRejectedErrorDetails - a model defined in OpenAPI

        Args:
            error_message (str): An explanation of the error
            is_fresh (bool): Whether (true) this rejected status has just been calculated fresh, or (false) the status is from the pending transaction result cache. 
            is_payload_rejection_permanent (bool): Whether the rejection of this payload is known to be permanent. 
            is_intent_rejection_permanent (bool): Whether the rejection of this intent is known to be permanent - this is a stronger statement than the payload rejection being permanent, as it implies any payloads containing the intent will also be permanently rejected. 
            is_rejected_because_intent_already_committed (bool): Whether the cached rejection of this intent is due to the intent already having been committed. If so, see the /transaction/receipt endpoint for further information. 
            type (LtsTransactionSubmitErrorDetailsType):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            retry_from_timestamp (Instant): [optional]  # noqa: E501
            retry_from_epoch (int): An integer between `0` and `10^10`, marking the epoch after which the node will consider recalculating the validity of the transaction. Only present if the rejection is temporary due to a header specifying a \"from epoch\" in the future. . [optional]  # noqa: E501
            invalid_from_epoch (int): An integer between `0` and `10^10`, marking the epoch from which the transaction will no longer be valid, and be permanently rejected. Only present if the rejection isn't permanent. . [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.error_message = error_message
        self.is_fresh = is_fresh
        self.is_payload_rejection_permanent = is_payload_rejection_permanent
        self.is_intent_rejection_permanent = is_intent_rejection_permanent
        self.is_rejected_because_intent_already_committed = is_rejected_because_intent_already_committed
        self.type = type
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, error_message, is_fresh, is_payload_rejection_permanent, is_intent_rejection_permanent, is_rejected_because_intent_already_committed, type, *args, **kwargs):  # noqa: E501
        """LtsTransactionSubmitRejectedErrorDetails - a model defined in OpenAPI

        Args:
            error_message (str): An explanation of the error
            is_fresh (bool): Whether (true) this rejected status has just been calculated fresh, or (false) the status is from the pending transaction result cache. 
            is_payload_rejection_permanent (bool): Whether the rejection of this payload is known to be permanent. 
            is_intent_rejection_permanent (bool): Whether the rejection of this intent is known to be permanent - this is a stronger statement than the payload rejection being permanent, as it implies any payloads containing the intent will also be permanently rejected. 
            is_rejected_because_intent_already_committed (bool): Whether the cached rejection of this intent is due to the intent already having been committed. If so, see the /transaction/receipt endpoint for further information. 
            type (LtsTransactionSubmitErrorDetailsType):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            retry_from_timestamp (Instant): [optional]  # noqa: E501
            retry_from_epoch (int): An integer between `0` and `10^10`, marking the epoch after which the node will consider recalculating the validity of the transaction. Only present if the rejection is temporary due to a header specifying a \"from epoch\" in the future. . [optional]  # noqa: E501
            invalid_from_epoch (int): An integer between `0` and `10^10`, marking the epoch from which the transaction will no longer be valid, and be permanently rejected. Only present if the rejection isn't permanent. . [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.error_message = error_message
        self.is_fresh = is_fresh
        self.is_payload_rejection_permanent = is_payload_rejection_permanent
        self.is_intent_rejection_permanent = is_intent_rejection_permanent
        self.is_rejected_because_intent_already_committed = is_rejected_because_intent_already_committed
        self.type = type
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
